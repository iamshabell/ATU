/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCelebrityArgs } from "./CreateCelebrityArgs";
import { UpdateCelebrityArgs } from "./UpdateCelebrityArgs";
import { DeleteCelebrityArgs } from "./DeleteCelebrityArgs";
import { CelebrityFindManyArgs } from "./CelebrityFindManyArgs";
import { CelebrityFindUniqueArgs } from "./CelebrityFindUniqueArgs";
import { Celebrity } from "./Celebrity";
import { ServiceFindManyArgs } from "../../service/base/ServiceFindManyArgs";
import { Service } from "../../service/base/Service";
import { User } from "../../user/base/User";
import { CelebrityService } from "../celebrity.service";

@graphql.Resolver(() => Celebrity)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CelebrityResolverBase {
  constructor(
    protected readonly service: CelebrityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Celebrity",
    action: "read",
    possession: "any",
  })
  async _celebritiesMeta(
    @graphql.Args() args: CelebrityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Celebrity])
  @nestAccessControl.UseRoles({
    resource: "Celebrity",
    action: "read",
    possession: "any",
  })
  async celebrities(
    @graphql.Args() args: CelebrityFindManyArgs
  ): Promise<Celebrity[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Celebrity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Celebrity",
    action: "read",
    possession: "own",
  })
  async celebrity(
    @graphql.Args() args: CelebrityFindUniqueArgs
  ): Promise<Celebrity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Celebrity)
  @nestAccessControl.UseRoles({
    resource: "Celebrity",
    action: "create",
    possession: "any",
  })
  async createCelebrity(
    @graphql.Args() args: CreateCelebrityArgs
  ): Promise<Celebrity> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Celebrity)
  @nestAccessControl.UseRoles({
    resource: "Celebrity",
    action: "update",
    possession: "any",
  })
  async updateCelebrity(
    @graphql.Args() args: UpdateCelebrityArgs
  ): Promise<Celebrity | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Celebrity)
  @nestAccessControl.UseRoles({
    resource: "Celebrity",
    action: "delete",
    possession: "any",
  })
  async deleteCelebrity(
    @graphql.Args() args: DeleteCelebrityArgs
  ): Promise<Celebrity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Service])
  @nestAccessControl.UseRoles({
    resource: "Service",
    action: "read",
    possession: "any",
  })
  async services(
    @graphql.Parent() parent: Celebrity,
    @graphql.Args() args: ServiceFindManyArgs
  ): Promise<Service[]> {
    const results = await this.service.findServices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: Celebrity): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
